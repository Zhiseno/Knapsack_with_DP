#include <stdio.h>
#include <stdlib.h>

//ฟังก์ชันสำหรับหาค่าที่มากกว่าจาก Parameter 2 ตัวที่ใส่มาจากนั้นส่งค่าที่มากกว่ากลับไป
int max(int A, int B)
{
	if (A > B)
		return A;
	else
		return B;
}

//ฟังก์ชันสำหรับหาค่ามูลค่ารวมที่มากที่สุด โดยใช้หลักการ Recursive Function
int MFKnapsack(int i, int j, int **F, int weight[], int values[])
{
	int value;
	if (F[i][j] < 0)
	{
		if (j < weight[i])
			value = MFKnapsack(i - 1, j, F, weight, values);
		else
			value = max(MFKnapsack(i - 1, j, F, weight, values), (values[i] + MFKnapsack(i - 1, j - weight[i], F, weight, values)));
		F[i][j] = value;
	}
	return F[i][j];
}

int main()
{
	int i = 0;
	int j = 0;
	int n = 0;
	int max_weight = 0;
	//รับจำนวน item และน้ำหนักรวมที่สามารถรับได้
	scanf("%d %d",&n,&max_weight);
	int weight[n + 1];
	int values[n + 1];
	//รับน้ำหนักและมูลค่าของ item แต่ละชิ้น
	for (i = 1; i < (n + 1); i++)
		scanf("%d %d", &values[i], &weight[i]);
	//สร้าง Array 2 มิติ
	int **F = (int **)malloc(sizeof(int *) * (n + 1));
	for (int i = 0; i <= n; i++)
		F[i] = (int *)malloc(sizeof(int) * (max_weight + 1));
	//กำหนดค่าใน Array แถวและหลักที่ 0 ให้มีค่าเป็น 0
	for (i = 0; i <= max_weight; i++)
		F[0][i] = 0;
	for (i = 0; i <= n; i++)
		F[i][0] = 0;
	//กำหนดค่าใน Array ที่ไม่ใช่แถวและหลักที่ 0 ให้มีค่าเป็น -1 ทั้งหมด
	for (i = 1; i <= n; i++)
		for (j = 1; j <= max_weight; j++)
			F[i][j] = -1;
	//เรียกใช้  Function MFKnapsack เพื่อหาค่ามูลค่ารวมที่มากที่สุดที่ไม่เกิน max_weight
	int res = MFKnapsack(n, max_weight, F, weight, values);
	//แสดงผล ค่าคำตอบมูลค่ารวมที่มากที่สุด
	printf("\n------------------------------------------------------------------------------------------------------\n");
    printf("Result = %d", res);
    printf("\n------------------------------------------------------------------------------------------------------\n");

    printf("\nEnd Program.\n\n");

    printf("\nWriting Program by : \n\n");

    printf("+-----------------------------------------------------+\n");
    printf("|                      CPE KMUTT                      |\n");
    printf("|                  ALGORITHM DESIGN                   |\n");
    printf("+-----------------------------------------------------+\n");
    printf("|  Knapsack Problem with Dynamic Programing Project   |\n");
    printf("+-----------------------------------------------------+\n");
    printf("|     1. 63070501017 Mr. Natad       Suwannapong      |\n");
    printf("|     2. 63070501028 Mr. Tittawat    Jai-ou           |\n");
    printf("|     3. 63070501048 Mr. Passakorn   Klaikaew         |\n");
    printf("|     4. 63070501062 Mr. Supamongkol Kidrungruang     |\n");
    printf("|     5. 63070501064 Mr. Suphawit    Sanitphon        |\n");
    printf("+-----------------------------------------------------+\n\n");

    return 0;
}
